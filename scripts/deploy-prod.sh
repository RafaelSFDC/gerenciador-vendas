#!/bin/bash

# Script de deploy completo com verifica√ß√µes para produ√ß√£o

set -e

echo "üöÄ Iniciando deploy para produ√ß√£o no Render.com..."

# Executar verifica√ß√£o de configura√ß√µes
if [ -f "scripts/verify-config.sh" ]; then
    echo "üîç Executando verifica√ß√£o de configura√ß√µes..."
    chmod +x scripts/verify-config.sh
    ./scripts/verify-config.sh

    if [ $? -ne 0 ]; then
        echo "‚ùå Verifica√ß√£o de configura√ß√µes falhou. Corrija os erros antes de continuar."
        exit 1
    fi
    echo "‚úÖ Verifica√ß√£o de configura√ß√µes passou!"
    echo ""
else
    echo "‚ö†Ô∏è Script de verifica√ß√£o n√£o encontrado, continuando..."
fi

# Verificar se estamos em um reposit√≥rio git
if [ ! -d ".git" ]; then
    echo "‚ùå Este n√£o √© um reposit√≥rio git. Inicialize um reposit√≥rio primeiro."
    exit 1
fi

# Verificar se o Node.js est√° instalado
if ! command -v node &> /dev/null; then
    echo "‚ùå Node.js n√£o encontrado. Instale o Node.js primeiro."
    exit 1
fi

# Verificar se o Composer est√° instalado
if ! command -v composer &> /dev/null; then
    echo "‚ùå Composer n√£o encontrado. Instale o Composer primeiro."
    exit 1
fi

echo "üîç Executando verifica√ß√µes pr√©-deploy..."

# Limpar cache do composer e reinstalar depend√™ncias
echo "üßπ Limpando cache do composer..."
composer clear-cache

# Instalar depend√™ncias se necess√°rio
if [ ! -d "vendor" ]; then
    echo "üì¶ Instalando depend√™ncias PHP..."
    composer install --no-dev --optimize-autoloader
else
    echo "üì¶ Atualizando depend√™ncias PHP..."
    composer install --no-dev --optimize-autoloader
fi

if [ ! -d "node_modules" ]; then
    echo "üì¶ Instalando depend√™ncias Node.js..."
    npm install
fi

# Executar build dos assets
echo "üèóÔ∏è Construindo assets..."
npm run build

# Verificar se o build foi bem-sucedido
if [ ! -d "public/build" ]; then
    echo "‚ùå Build dos assets falhou. Verifique os erros acima."
    exit 1
fi

# Testar build do Docker localmente (opcional)
if command -v docker &> /dev/null; then
    echo "üê≥ Testando build do Docker..."
    docker build -t dc-tecnologia-test . --target production
    echo "‚úÖ Build do Docker bem-sucedido!"
else
    echo "‚ö†Ô∏è Docker n√£o encontrado. Pulando teste de build local."
fi

# Verificar configura√ß√µes do render.yaml
echo "üîç Verificando configura√ß√µes do render.yaml..."
if [ -f "render.yaml" ]; then
    if grep -q "FORCE_HTTPS.*true" render.yaml && grep -q "APP_URL.*https://dc-tecnologia-vendas.onrender.com" render.yaml; then
        echo "‚úÖ Configura√ß√µes HTTPS corretas no render.yaml"
    else
        echo "‚ö†Ô∏è Atualizando configura√ß√µes HTTPS no render.yaml..."
        # Backup do arquivo original
        cp render.yaml render.yaml.backup

        # Atualizar FORCE_HTTPS se necess√°rio
        if ! grep -q "FORCE_HTTPS.*true" render.yaml; then
            sed -i 's/FORCE_HTTPS.*$/FORCE_HTTPS\n        value: true/' render.yaml
        fi

        # Atualizar APP_URL se necess√°rio
        if ! grep -q "APP_URL.*https://dc-tecnologia-vendas.onrender.com" render.yaml; then
            sed -i 's|APP_URL.*$|APP_URL\n        value: https://dc-tecnologia-vendas.onrender.com|' render.yaml
        fi

        echo "‚úÖ Configura√ß√µes HTTPS atualizadas"
    fi
else
    echo "‚ùå Arquivo render.yaml n√£o encontrado!"
    exit 1
fi

# Verificar se h√° mudan√ßas para commit
if [ -n "$(git status --porcelain)" ]; then
    echo "üìù Fazendo commit das mudan√ßas..."
    git add .
    git commit -m "feat: corrigir Content Security Policy para deploy Docker

- Atualizada pol√≠tica CSP no nginx.conf para permitir CDNs necess√°rios
- Criada configura√ß√£o espec√≠fica HTTPS (default-https.conf) para produ√ß√£o
- Implementado middleware CSP Laravel com suporte a nonces
- Adicionados scripts inline com nonces no template app.blade.php
- Separadas configura√ß√µes de desenvolvimento e produ√ß√£o
- Dockerfile atualizado para usar configura√ß√£o HTTPS em produ√ß√£o
- Configura√ß√µes autom√°ticas FORCE_HTTPS=true e APP_URL correto
- Corrigidos erros de bloqueio de recursos por CSP muito restritivo"
else
    echo "‚ÑπÔ∏è Nenhuma mudan√ßa para commit."
fi

# Push para o reposit√≥rio
echo "üì§ Enviando para o reposit√≥rio..."
git push

echo "‚úÖ Deploy para produ√ß√£o iniciado!"
echo ""
echo "üîó Pr√≥ximos passos:"
echo "1. Acesse https://dashboard.render.com"
echo "2. Conecte seu reposit√≥rio se ainda n√£o conectou"
echo "3. O Render detectar√° automaticamente o render.yaml"
echo "4. Aguarde o build e deploy completarem (~5-10 minutos)"
echo ""
echo "üìä Endpoints importantes:"
echo "- Aplica√ß√£o: https://dc-tecnologia-vendas.onrender.com"
echo "- Health check: https://dc-tecnologia-vendas.onrender.com/health"
echo ""
echo "üîê Credenciais de teste:"
echo "- Email: vendedor@dctecnologia.com"
echo "- Senha: 123456"
echo ""
echo "‚öôÔ∏è Configura√ß√µes autom√°ticas aplicadas:"
echo "- FORCE_HTTPS=true (redirecionamento autom√°tico para HTTPS)"
echo "- APP_URL=https://dc-tecnologia-vendas.onrender.com"
echo "- Content Security Policy otimizada para produ√ß√£o"
echo "- Headers de seguran√ßa HSTS configurados"
echo ""
echo "üîß Para for√ßar re-execu√ß√£o dos seeds:"
echo "1. V√° em Environment Variables no Render"
echo "2. Defina FORCE_SEED=true"
echo "3. Clique em Deploy Latest Commit"
echo ""
echo "üõ°Ô∏è Corre√ß√µes CSP implementadas:"
echo "- Pol√≠tica CSP atualizada para permitir Bootstrap e Font Awesome"
echo "- Suporte a CDNs: cdnjs.cloudflare.com e cdn.jsdelivr.net"
echo "- Scripts inline com nonces para melhor seguran√ßa"
echo "- Configura√ß√£o separada para desenvolvimento e produ√ß√£o"
